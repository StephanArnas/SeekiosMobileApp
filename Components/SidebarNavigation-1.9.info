{"Name":"Sidebar Navigation","Id":2082,"Alias":"SidebarNavigation","Description":"Sidebar Navigation\n============================\n\n`Sidebar Navigation` allows you to provide one UIViewController to be used as a content view\nand another to be used as a menu. When you open the menu the content view will slide over\nto reveal the provided menu UIViewController.\n\nFrom the side menu you can easily change the content UIViewController or push UIViewControllers\nonto a UINavigationController.\n\nTo set it up just create a root UIViewController and a SidebarController, passing in your \ncontent and menu controllers.\n\n`RootViewController.cs`\n```csharp\nusing SidebarNavigation;\n...\npublic partial class RootViewController : UIViewController\n{\n\t// the sidebar controller for the app\n\tpublic SidebarController SidebarController { get; private set; }\n\n\tpublic override void ViewDidLoad()\n\t{\n\t\tbase.ViewDidLoad();\n\n\t\t// create a slideout navigation controller with the top navigation controller and the menu view controller\n\t\tSidebarController = new SidebarController(this, new ContentController(), new SideMenuController());\n\t}\n}\n...\n```\n\n`AppDelegate.cs`\n```csharp\n...\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n\twindow = new UIWindow(UIScreen.MainScreen.Bounds);\n\t\n\t// set our root view controller with the sidebar menu as the apps root view controller\n\twindow.RootViewController = new RootViewController();\n\t\n\twindow.MakeKeyAndVisible();\n\treturn true;\n}\n...\n```\n\nIn the content controller you can add a button to open the slideout menu.\n\n```csharp\nmenuButton.TouchUpInside += (sender, e) =\u003e {\n\tSidebarController.ToggleMenu();\n};\n```\n\nIn the side menu controller you can add buttons to change the content view.\n\n```csharp\notherContentButton.TouchUpInside += (sender, e) =\u003e {\n\tSidebarController.ChangeContentView(new OtherContentController());\n};\n```\n\nAdditional options include hiding the shadow, setting the menu width, and placing the menu \non the left.\n\n```csharp\nSidebarController.HasShadowing = false;\nSidebarController.MenuWidth = 220;\nSidebarController.MenuLocation = SidebarController.MenuLocations.Left;\n```\n\nSee the sample projects included in the [source](https://github.com/jdehlin/Xamarin-Sidebar) for more details.","Version":"1.9","Summary":"An easy to use and versatile slideout menu.","QuickStart":"Sidebar Navigation\n============================\n\n`Sidebar Navigation` allows you to provide one UIViewController to be used as a content view\nand another to be used as a menu. When you open the menu the content view will slide over\nto reveal the provided menu UIViewController.\n\nFrom the side menu you can easily change the content UIViewController or push UIViewControllers\nonto a UINavigationController.\n\nTo set it up just create a root UIViewController and a SidebarController, passing in your \ncontent and menu controllers.\n\n`RootViewController.cs`\n```csharp\nusing SidebarNavigation;\n...\npublic partial class RootViewController : UIViewController\n{\n\t// the sidebar controller for the app\n\tpublic SidebarController SidebarController { get; private set; }\n\n\tpublic override void ViewDidLoad()\n\t{\n\t\tbase.ViewDidLoad();\n\n\t\t// create a slideout navigation controller with the top navigation controller and the menu view controller\n\t\tSidebarController = new SidebarController(this, new ContentController(), new SideMenuController());\n\t}\n}\n...\n```\n\n`AppDelegate.cs`\n```csharp\n...\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n\twindow = new UIWindow(UIScreen.MainScreen.Bounds);\n\t\n\t// set our root view controller with the sidebar menu as the apps root view controller\n\twindow.RootViewController = new RootViewController();\n\t\n\twindow.MakeKeyAndVisible();\n\treturn true;\n}\n...\n```\n\nIn the content controller you can add a button to open the slideout menu.\n\n```csharp\nmenuButton.TouchUpInside += (sender, e) =\u003e {\n\tSidebarController.ToggleMenu();\n};\n```\n\nIn the side menu controller you can add buttons to change the content view.\n\n```csharp\notherContentButton.TouchUpInside += (sender, e) =\u003e {\n\tSidebarController.ChangeContentView(new OtherContentController());\n};\n```\n\nAdditional options include hiding the shadow, setting the menu width, and placing the menu \non the left.\n\n```csharp\nSidebarController.HasShadowing = false;\nSidebarController.MenuWidth = 220;\nSidebarController.MenuLocation = SidebarController.MenuLocations.Left;\n```\n\nSee the sample projects included in the [source](https://github.com/jdehlin/Xamarin-Sidebar) for more details.\nContact the author on Twitter: [JackDehlin](https://twitter.com/JackDehlin)","Hash":"ad21a0a5e25057c277f7360efe6d7898","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}